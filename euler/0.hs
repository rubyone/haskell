--
-- 5.3 The zip function
--
module Main where

import Test.QuickCheck hiding (test)
import Test.HUnit


--
-- Problem 1:
--
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we
-- get 3, 5, 6 and 9. The sum of these multiples is 23.
--
-- Find the sum of all the multiples of 3 or 5 below 1000.
--
sum_of_mul_3_or_5 :: Int -> Int
sum_of_mul_3_or_5 n = foldl (+) 0 [x | x <- [3..n-1], x `mod` 3 == 0 || x `mod` 5 == 0]

{-
 - Result:

Prelude> :load ./0.hs
[1 of 1] Compiling Main             ( 0.hs, interpreted )
Ok, modules loaded: Main.
*Main> runTestTT tests
Cases: 1  Tried: 1  Errors: 0  Failures: 0
Counts {cases = 1, tried = 1, errors = 0, failures = 0}
*Main> sum_of_mul_3_or_5 1000
233168
*Main>
-}

{-
Problem 2: Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not
exceed four million.
-}

-- Fibonacci sequence
-- naive version
{-
fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)
fibs n = [fib n | n <- [0..n]]
-}
fib :: Int -> Int
fib n = fibs !! n
    where fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

prop_fib n = n > 2 ==> fib n == fib (n-1) + fib (n-2)
    where types = n::Int


unittests = Test.HUnit.test [
    "1. sum of multiples of 3 or 5 below 10" ~: sum_of_mul_3_or_5 10 ~?= 23,
    "2.a.Fibonacci seq, fib(0)" ~: fib 0 ~?= 0,
    "2.b.Fibonacci seq, fib(1)" ~: fib 1 ~?= 1,
    "2.c.Fibonacci seq, fib(10)" ~: fib 10 ~?= 55]

runtests = do quickCheck prop_fib
              runTestTT unittests


